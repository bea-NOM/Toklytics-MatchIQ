name: GPT-5 Merge Guard

permissions:
  pull-requests: read
  contents: read

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  guard:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for GPT-5 env changes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Provide a safe core fallback if not injected by the runner
            const coreSafe = (typeof core !== 'undefined') ? core : {
              info: (m) => console.log(m),
              warning: (m) => console.warn(m),
              setFailed: (m) => { console.error(m); throw new Error(m) }
            };

            const pr = context.payload.pull_request;
            if (!pr) {
              coreSafe.info('No pull_request payload found; skipping guard.');
              return;
            }
            const labelAllowed = (pr.labels || []).some(l => l && l.name === 'gpt5-approve');
            if (labelAllowed) {
              coreSafe.info('gpt5-approve label present â€” skipping guard');
              return;
            }

            let files;
            try {
              // Try the modern REST API first
              if (github && github.rest && github.rest.pulls && typeof github.rest.pulls.listFiles === 'function') {
                files = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });
              } else if (github && github.pulls && typeof github.pulls.listFiles === 'function') {
                // Fallback for older github-script shapes
                files = await github.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });
              } else {
                coreSafe.warning('GitHub client does not expose pulls.listFiles; skipping guard.');
                return;
              }
            } catch (err) {
              const msg = `Failed to list PR files: ${err && err.message ? err.message : String(err)}`;
              coreSafe.warning(msg);
              try {
                // Post a comment on the PR to notify maintainers that the guard skipped enforcement
                await github.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `GPT-5 guard skipped file inspection: ${msg}. The workflow token may lack permissions. Please verify the PR does not modify GPT-5 flags or add label 'gpt5-approve' to bypass.`,
                });
                coreSafe.info('Posted comment to PR about skipped guard.');
              } catch (commentErr) {
                coreSafe.warning(`Failed to post PR comment: ${commentErr && commentErr.message ? commentErr.message : String(commentErr)}`);
              }
              return;
            }
            const keywords = ['ENABLE_GPT5', 'ENABLE_GPT5_ALLOW', 'OPENAI_API_KEY'];
            for (const f of files.data) {
              const patch = f.patch || '';
              for (const kw of keywords) {
                if (patch.includes(kw)) {
                  coreSafe.setFailed(`PR modifies or adds ${kw}. Add label 'gpt5-approve' to bypass.`);
                }
              }
            }

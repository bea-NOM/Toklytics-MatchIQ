// ──────────────────────────────────────────────────────────────────────────────
// Prisma Client + Datasource
// ──────────────────────────────────────────────────────────────────────────────
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ──────────────────────────────────────────────────────────────────────────────
// Enums
// ──────────────────────────────────────────────────────────────────────────────
enum Role {
  VIEWER
  CREATOR
  AGENCY
  ADMIN
}

enum BoosterType {
  MULTIPLIER
  MIST
  GLOVE
  HAMMER
  TIME_MAKER
  BOLT
}

enum BoosterEventKind {
  CREATED
  ACTIVATED
  EXPIRED
  REVOKED
}

enum NotificationChannel {
  EMAIL
  IN_APP
}

enum NotificationKind {
  BOOSTER_EXPIRING
  BATTLE_REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum SubStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
}

enum Plan {
  STARTER
  PRO
  AGENCY
}

// ──────────────────────────────────────────────────────────────────────────────
// Core Models
// ──────────────────────────────────────────────────────────────────────────────
model users {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique
  handle     String?
  role       Role
  tiktok_id  String?  @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // one-to-one roles
  creators creators?
  agencies agencies?
  viewers  viewers?

  // relations
  subscriptions   subscriptions[]
  notifications   notifications[]
  calendar_tokens calendar_tokens[]

  @@map("users")
}

model creators {
  id                 String  @id @default(uuid()) @db.Uuid
  user_id            String  @unique @db.Uuid
  user               users   @relation(fields: [user_id], references: [id])
  display_name       String
  backstage_verified Boolean @default(false)

  battles     battles[]
  boosters    boosters[]
  memberships agency_memberships[]
}

model agencies {
  id                 String  @id @default(uuid()) @db.Uuid
  user_id            String  @unique @db.Uuid
  user               users   @relation(fields: [user_id], references: [id])
  name               String
  backstage_org_id   String
  backstage_verified Boolean @default(false)

  // creators attached to this agency
  memberships agency_memberships[]

  // subscriptions owned by this agency (named relation)
  subscriptions subscriptions[] @relation("AgencySubscriptions")
}

model agency_memberships {
  id         String  @id @default(uuid()) @db.Uuid
  agency_id  String  @db.Uuid
  creator_id String  @db.Uuid
  active     Boolean @default(true)

  agency  agencies @relation(fields: [agency_id], references: [id])
  creator creators @relation(fields: [creator_id], references: [id])

  @@unique([agency_id, creator_id])
  @@map("agency_memberships")
}

model viewers {
  id           String     @id @default(uuid()) @db.Uuid
  user_id      String     @unique @db.Uuid
  user         users      @relation(fields: [user_id], references: [id])
  display_name String
  boosters     boosters[]
}

model battles {
  id           String   @id @default(uuid()) @db.Uuid
  creator_id   String   @db.Uuid
  creator      creators @relation(fields: [creator_id], references: [id])
  scheduled_at DateTime @db.Timestamptz(6)
  title        String
  notes        String?
}

model boosters {
  id               String      @id @default(uuid()) @db.Uuid
  type             BoosterType
  holder_viewer_id String      @db.Uuid
  creator_id       String      @db.Uuid
  awarded_at       DateTime    @db.Timestamptz(6)
  expiry_at        DateTime    @db.Timestamptz(6)
  source           String
  active           Boolean     @default(true)

  holder  viewers          @relation(fields: [holder_viewer_id], references: [id])
  creator creators         @relation(fields: [creator_id], references: [id])
  events  booster_events[]

  @@index([creator_id])
  @@index([holder_viewer_id])
  @@index([active, expiry_at])
}

model booster_events {
  id         String           @id @default(uuid()) @db.Uuid
  booster_id String           @db.Uuid
  booster    boosters         @relation(fields: [booster_id], references: [id])
  kind       BoosterEventKind
  at         DateTime         @db.Timestamptz(6)
  meta       Json?
}

model notifications {
  id      String              @id @default(uuid()) @db.Uuid
  user_id String              @db.Uuid
  user    users               @relation(fields: [user_id], references: [id])
  channel NotificationChannel
  kind    NotificationKind
  payload Json
  send_at DateTime            @db.Timestamptz(6)
  sent_at DateTime?           @db.Timestamptz(6)
  status  NotificationStatus
  error   String?
}

model jobs {
  id         String    @id @default(uuid()) @db.Uuid
  type       String
  run_at     DateTime  @db.Timestamptz(6)
  payload    Json
  attempts   Int       @default(0)
  last_error String?
  locked_at  DateTime? @db.Timestamptz(6)
  done       Boolean   @default(false)

  @@index([run_at, done])
}

model webhooks {
  id          String   @id @default(uuid()) @db.Uuid
  provider    String
  signature   String?
  received_at DateTime @db.Timestamptz(6)
  payload     Json
}

// ── Subscriptions: owned by a user OR an agency (one of the two is set) ───────
model subscriptions {
  id                 String    @id @default(uuid()) @db.Uuid
  user_id            String?   @db.Uuid
  agency_id          String?   @db.Uuid
  status             SubStatus
  plan               Plan
  stripe_customer_id String
  stripe_sub_id      String?
  current_period_end DateTime?
  max_creators       Int? // e.g., 100 for Agency

  users    users?    @relation(fields: [user_id], references: [id])
  agencies agencies? @relation(name: "AgencySubscriptions", fields: [agency_id], references: [id])

  @@index([user_id])
  @@index([agency_id])
  @@map("subscriptions")
}

model calendar_tokens {
  id            String   @id @default(uuid()) @db.Uuid
  owner_user_id String   @db.Uuid
  owner         users    @relation(fields: [owner_user_id], references: [id])
  token         String   @unique
  created_at    DateTime @default(now()) @db.Timestamptz(6)
}

model powerup_events {
  id         String   @id @default(uuid()) @db.Uuid
  match_id   String   @db.Uuid
  creator_id String   @db.Uuid
  type       BoosterType
  used       Boolean  @default(false)
  held       Boolean  @default(true)
  expires_at DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([match_id])
  @@index([creator_id])
  @@index([expires_at])
  @@map("powerup_events")
}
